@model Application.ViewModels.vmPlc

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <form asp-action="AddTagInList" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group" hidden>
                    <label asp-for="Id" class="control-label"></label>
                    <input asp-for="Id" class="form-control" readonly />
                    <span asp-validation-for="Id" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Name" class="control-label"></label>
                    <input asp-for="Name" class="form-control" required />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="AddressPlc" class="control-label"></label>
                    <input asp-for="AddressPlc" class="form-control" required />
                    <span asp-validation-for="AddressPlc" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Type" class="control-label"></label>
                    <select asp-for="Type" class="form-select bg-light text-dark" id="Type"
                            asp-items="@(ViewBag.ListTypeTag as SelectList)"
                            aria-describedby="ListTypeTag">
                        <option selected disabled value="">Select one</option>
                    </select>
                    <span asp-validation-for="Type" class="text-danger"></span>
                </div>
                <div class="form-group text-center mt-3">
                    <input type="submit" value="Save" class="btn btn-outline-success" />
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let originalType = $('#Type').val();

            let $valueInput = $('.Value');

            $('#Type').off('change').on('change', function () {
                var newType = $(this).val();

                if (newType !== originalType) {
                    $valueInput.removeAttr('min max step onkeydown value');

                    $valueInput.val('');

                    if (newType == 'int') {
                        $valueInput.attr({
                            'type': 'number',
                            'min': '0',
                            'max': '999999',
                            'step': '1',
                            'onkeydown': 'return true;'
                        });
                        $valueInput.val('0');
                    } else if (newType == 'double') {
                        $valueInput.attr({
                            'type': 'number',
                            'min': '0',
                            'step': '0.1',
                            'onkeydown': 'return true;'
                        });
                        $valueInput.val('0.1');
                    } else if (newType == 'bool') {
                        $valueInput.attr({
                            'type': 'number',
                            'min': '0',
                            'max': '1',
                            'step': '1',
                            'onkeydown': 'return false;'
                        });
                        $valueInput.val('1');
                    }
                }
            });
        });

    </script>
}